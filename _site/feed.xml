<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/StudyingMySQL/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/StudyingMySQL/" rel="alternate" type="text/html" /><updated>2024-02-11T21:41:38-08:00</updated><id>http://localhost:4000/StudyingMySQL/feed.xml</id><title type="html">Dahna’s Blog</title><subtitle>Blog for Studying MySQL</subtitle><entry><title type="html">Cloud Services (AWS Server Setup)</title><link href="http://localhost:4000/StudyingMySQL/signinaws/" rel="alternate" type="text/html" title="Cloud Services (AWS Server Setup)" /><published>2024-01-11T00:00:00-08:00</published><updated>2024-01-11T00:00:00-08:00</updated><id>http://localhost:4000/StudyingMySQL/signinaws</id><content type="html" xml:base="http://localhost:4000/StudyingMySQL/signinaws/"><![CDATA[<h1 id="doker">Doker</h1>
<ul>
  <li>핵심 배포 기술</li>
  <li>7개 도커 : proxy server + flask/PHP + HTML/CSS/JS + 프로그램(워드프레스) + HTTPS(네트워크)</li>
  <li>Docker는 환경을 많이 탐 : 결국 서비스를 위해서는 리눅스 서버를 만들고 docker셋업을 해야한다.</li>
  <li>
    <p>프로그래밍 역량과는 다른 역량이 필요하다. ⇨ 꼼꼼하게 실수가 없는지 살펴야 함<br />
워낙 다양한 환경 세팅 등이 완벽히 맞아야 하기 때문</p>
  </li>
  <li>초대용량 운영 서비스 : 쉘 스크립트, git, 파이썬 스크립트, 쿠버네티스, 무중단 배포</li>
</ul>

<p><br /></p>

<h2 id="모던-서버-기술-관련-배경지식-이해">모던 서버 기술 관련 배경지식 이해</h2>

<h3 id="최신-서버-기술-큰-그림과-로드맵-이해하기-도커와-마이크로서비스">최신 서버 기술 큰 그림과 로드맵 이해하기 (도커와 마이크로서비스)</h3>

<ul>
  <li>서버는 24시간 구동이 필요하며, 특정 목적으로 사용되는 프로그램이 많음(웹 서버)</li>
  <li>다양한 리눅스 패키지와 업데이트로 프로그램 설정이 수시로 달라짐</li>
  <li>서버 이전시 이전할 서버에 맞도록 재설정 필요 ⇨ 도커 출현</li>
  <li>도커는 일종의 서버환경을 감싸서, 도커 레벨로 서버를 다룰 수 있음</li>
  <li>따라서 서버 이전, 서버 패키지 버전 변경 등으로 일일이 서버 설정이 불필요</li>
  <li>단순히 도커를 만들어서 서버에 실행하면 됨</li>
</ul>

<p><br /></p>

<p><strong>웹서비스 개발과 마이크로서비스</strong></p>
<ul>
  <li>예전에는 모놀리틱 구조 : 하나의 서버에 모든 기능을 넣음, 한 기능만 잘못돼도 서버 운영이 안됨</li>
  <li>요즘은 마이크로 서비스 : 각각의 서버 운영<br />
여러 서버에 각 기능을 분산해놓은 후, Rest API 등으로 통신을 통해 전체 서비스를 운영<br />
각 서비스를 도커로 감쌈</li>
</ul>

<p><br /></p>

<h3 id="최신-서버-기술-큰-그림과-로드맵-이해하기devops">최신 서버 기술 큰 그림과 로드맵 이해하기(DevOps)</h3>

<p>DevOps : 서비스가 방대해짐에 따라, 조직 운영도 바뀌어야할 필요가 생김<br />
운영 + 운영 시스템 효율화 / 자동화 프로젝트를 목표로 한 팀<br />
수많은 트래픽을 견뎌낼 수 있도록 시스템을 만들고 관련된 프로그래밍 작성<br />
다양한 마이크로서비스들을 바로 설치하고 운영할 수 있도록 자동배포 관련된 기능을 만듦</p>
<ul>
  <li>Release System 자동화</li>
  <li>코드 리뷰, 테스트 자동화</li>
  <li>서비스 모니터링 시스템</li>
  <li>이슈 발생시 커뮤니케이션 시스템<br />
⇨ 자동 배포</li>
</ul>

<p><br /></p>

<p><strong>마이크로 서비스와 DevOps, 그리고 도커</strong></p>
<ul>
  <li>각 마이크로 서비스를 도커로 개발 ⇨ 도커 개발</li>
  <li>초대용량 서비스 유지 보수를 위한 서버 핸들링 필요(ex: 네트워크 트래픽에 따른 서버 관리) ⇨ 쿠버네티스 개발</li>
  <li>수시 릴리즈를 지원하기 위한 배포 시스템<br />
개발자가 git에 신규 코드를 릴리즈하면,<br />
Jenkins/Travis CI등으로 서버 자동 재가동<br />
⇨ 배포 자동화</li>
  <li>수시 릴리즈시, 서비스는 중단되지 않았으면 좋겠음<br />
⇨ 무중단 배포<br />
(쿠버네티스/무중단 배포도 결국 도커가 기본이자 핵심)</li>
</ul>

<p><br /></p>

<h3 id="리눅스-역사">리눅스 역사</h3>
<ul>
  <li>
    <p>리눅스(LINUX) : 서버에 많이 사용되는 운영체제. 최근 서버 환경은 주로 리눅스<br />
C언어로 프로그래밍할 때 많이 쓰임<br />
클라우드 컴퓨팅(AWS) - 서버를 제공하는 서비스 업체에 가입해서 사용한 시간만큼 비용을 지불</p>
  </li>
  <li>
    <p>리눅스 시작 : 리누스 토발즈(Linus Torvalds)가 개발<br />
대학에 있는 UNIX 컴퓨터를 집에서 쓰고 싶다.<br />
다중 사용자, 다중 작업(시분할 시스템, 멀티 태스킹)을 지원하는 유닉스와 유사한 운영체제</p>
  </li>
  <li>
    <p>GNU 프로젝트 (Gnu is Not Unix)<br />
유닉스 운영체제를 여러 회사에서 각자 개발, 소스를 공유하지 않는 문화에 반발<br />
리차드 스톨만 : 초기 컴퓨터 개발 공동체의 상호협력적인 문화로 돌아갈 것을 주장하며, 1985년도에 GNU 선언문을 발표<br />
GNU 프로젝트를 지원하기 위해 자유 소프트웨어 재단(FSF)설립과 GNU 공개 라이선스(GPL)라는 규약을 제공</p>
  </li>
  <li>
    <p>GPL 라이선스 : GPL프로그램은 어떤 목적으로, 어떤 형태로든 사용할 수 있지만, 사용하거나 변경된 프로그램을 다시 배포하는 경우 동일한 GPL라이선스로 공개 해야 함</p>
  </li>
  <li>
    <p>GNU 프로젝트와 GNU Hurd <br />
운영체제 커널 개발 시도 - GNU Hurd 
운영체제에 필요한 라이브러리, 컴파일러, 에디터, 쉘 개발 <br />
⇨ 실패함 ⇨ 리누스 토발즈가 개발한 운영체제를 오픈소스로 공개 <br />
리눅스 + GNU 프로젝트 = 지금의 리눅스</p>
  </li>
</ul>

<p><br /></p>

<h2 id="클라우드-서비스aws-서버-구축">클라우드 서비스(AWS 서버 구축)</h2>

<h3 id="클라우드-서비스-구축---aws-회원가입-및-리눅스-서버-구축">클라우드 서비스 구축 - AWS 회원가입 및 리눅스 서버 구축</h3>

<p><strong>리눅스 설치 방법</strong></p>
<ul>
  <li>
    <p>가상 머신 소프트웨어 : PC환경에 따라서, 예상치 못한 문제들을 만날 수 있음, 설치가 불가, 속도 저하</p>
  </li>
  <li>
    <p>클라우드 컴퓨팅 서비스 활용<br />
최신 기술에 익숙해진다는 장점<br />
동일한 환경에서 사용이 가능<br />
현업에서 많이 사용하는 방법임</p>
  </li>
  <li>
    <p>클라우드 컴퓨팅 설정<br />
Amazon Web Service(AWS) : 무료로 1년간 사용 가능. 리눅스 사용 후 계정을 닫으면 됨</p>
  </li>
  <li>
    <p>AWS 가입<br />
<img src="/StudyingMySQL/assets/img/20240111_1_1.png" alt="1" /></p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>EC2 선택(지역 꼭 확인)</li>
  <li>사이드 메뉴에서 인스턴스 ⇨ 인스턴스 시작</li>
  <li>Ubuntu Server 22.04 LTS(HVM), SSD Volume Type 선택<br />
<img src="/StudyingMySQL/assets/img/20240111_1_2.png" alt="2" /></li>
</ul>

<p><br /></p>

<ul>
  <li>인스턴스 유형 t2.micro 선택</li>
  <li>볼륨크기 30기가(무료로 허용가능한 범위 확인)</li>
  <li>키페어 생성</li>
  <li>인스턴스 시작 <br />
<img src="/StudyingMySQL/assets/img/20240111_1_3.png" alt="3" /></li>
</ul>

<p><br /></p>

<ul>
  <li>네트워크 및 보안 - 탄력적 IP 설정 <br />
고정 IP부여하기<br />
할당 후 선택하고 작업 ⇨ 탄력적 IP주소 연결 ⇨ 인스턴스 선택 후 연결</li>
</ul>

<p><img src="/StudyingMySQL/assets/img/20240111_1_4.png" alt="4" /></p>

<p><br /></p>

<p><img src="/StudyingMySQL/assets/img/20240111_1_5.png" alt="5" />
<code class="language-plaintext highlighter-rouge">고정 IP안하면 과금 부여됨</code></p>]]></content><author><name>dahna</name></author><category term="Docker" /><summary type="html"><![CDATA[Doker 핵심 배포 기술 7개 도커 : proxy server + flask/PHP + HTML/CSS/JS + 프로그램(워드프레스) + HTTPS(네트워크) Docker는 환경을 많이 탐 : 결국 서비스를 위해서는 리눅스 서버를 만들고 docker셋업을 해야한다. 프로그래밍 역량과는 다른 역량이 필요하다. ⇨ 꼼꼼하게 실수가 없는지 살펴야 함 워낙 다양한 환경 세팅 등이 완벽히 맞아야 하기 때문]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/StudyingMySQL/assets/img/20240111_1_6.png" /><media:content medium="image" url="http://localhost:4000/StudyingMySQL/assets/img/20240111_1_6.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>